<?php

/**
 * BaseaBlogCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property boolean $posts
 * @property boolean $events
 * @property Doctrine_Collection $Users
 * @property Doctrine_Collection $BlogItems
 * @property Doctrine_Collection $Pages
 * @property Doctrine_Collection $BlogItemCategories
 * @property Doctrine_Collection $aBlogPageCategory
 * @property Doctrine_Collection $BlogCategoryUsers
 * 
 * @method integer             getId()                 Returns the current record's "id" value
 * @method string              getName()               Returns the current record's "name" value
 * @method string              getDescription()        Returns the current record's "description" value
 * @method boolean             getPosts()              Returns the current record's "posts" value
 * @method boolean             getEvents()             Returns the current record's "events" value
 * @method Doctrine_Collection getUsers()              Returns the current record's "Users" collection
 * @method Doctrine_Collection getBlogItems()          Returns the current record's "BlogItems" collection
 * @method Doctrine_Collection getPages()              Returns the current record's "Pages" collection
 * @method Doctrine_Collection getBlogItemCategories() Returns the current record's "BlogItemCategories" collection
 * @method Doctrine_Collection getABlogPageCategory()  Returns the current record's "aBlogPageCategory" collection
 * @method Doctrine_Collection getBlogCategoryUsers()  Returns the current record's "BlogCategoryUsers" collection
 * @method aBlogCategory       setId()                 Sets the current record's "id" value
 * @method aBlogCategory       setName()               Sets the current record's "name" value
 * @method aBlogCategory       setDescription()        Sets the current record's "description" value
 * @method aBlogCategory       setPosts()              Sets the current record's "posts" value
 * @method aBlogCategory       setEvents()             Sets the current record's "events" value
 * @method aBlogCategory       setUsers()              Sets the current record's "Users" collection
 * @method aBlogCategory       setBlogItems()          Sets the current record's "BlogItems" collection
 * @method aBlogCategory       setPages()              Sets the current record's "Pages" collection
 * @method aBlogCategory       setBlogItemCategories() Sets the current record's "BlogItemCategories" collection
 * @method aBlogCategory       setABlogPageCategory()  Sets the current record's "aBlogPageCategory" collection
 * @method aBlogCategory       setBlogCategoryUsers()  Sets the current record's "BlogCategoryUsers" collection
 * 
 * @package    symfony
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseaBlogCategory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('a_blog_category');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('posts', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('events', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));

        $this->option('type', 'INNODB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('sfGuardUser as Users', array(
             'refClass' => 'aBlogCategoryUser',
             'local' => 'blog_category_id',
             'foreign' => 'user_id'));

        $this->hasMany('aBlogItem as BlogItems', array(
             'refClass' => 'aBlogItemCategory',
             'local' => 'blog_category_id',
             'foreign' => 'blog_item_id'));

        $this->hasMany('aPage as Pages', array(
             'refClass' => 'aBlogPageCategory',
             'local' => 'blog_category_id',
             'foreign' => 'page_id'));

        $this->hasMany('aBlogItemCategory as BlogItemCategories', array(
             'local' => 'id',
             'foreign' => 'blog_category_id'));

        $this->hasMany('aBlogPageCategory', array(
             'local' => 'id',
             'foreign' => 'blog_category_id'));

        $this->hasMany('aBlogCategoryUser as BlogCategoryUsers', array(
             'local' => 'id',
             'foreign' => 'blog_category_id'));
    }
}